
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id String  @id @default(cuid())
  email String @unique
  name String 
  password String
  role Role @default(PLAYER)

  team Team? @relation(fields: [teamId], references: [id])
  teamId String? @map("team_id")
  captainedTeam Team? @relation(name: "capitan") 

  tournamentApplications TournamentApplication[] 
  matchApplications MatchApplication[]

  matchTimeline MatchTimeline[]

  @@map("user")
}

enum Role {
  PLAYER
  ADMIN
  SYSTEM_ADMIN
}


model Team {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String 

  tournaments Tournament[]
  tournamentApplications TournamentApplication[]
  wonTournaments Tournament[] @relation(name: "tournamentWinner") 
  group Group[]

  match Match[] @relation(name: "participatingTeams") 
  matchApplications MatchApplication[]
  wonMatches Match[] @relation(name: "winningTeam") 
  matchTimeline MatchTimeline[]


  players User[] 
  capitan User? @relation(fields: [capitanId], references: [id], name: "capitan") 
  capitanId String? @unique @map("capitan_id")

  @@map("team")
}


enum TournamentType {
  CUP
  LEAGUE
}

enum TournamentStatus {
  NotStarted
  Pending
  Completed
}
model Tournament {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String 
  startDate DateTime? @map("start_date")
  endDate DateTime? @map("end_date")

  teamCount Int?
  groupCount Int?
  winnerGroupCount Int?
  bestOfTheRest Int?


  tournamentType TournamentType @map("tournament_type")
  status TournamentStatus @default(NotStarted)

  teams Team[]
  groups Group[]
  tournamentApplications TournamentApplication[]

  match Match[] 
  matchType MatchType

  winner Team? @relation(name: "tournamentWinner", fields: [winnerId], references: [id]) 
  winnerId String? @map("winner_id")

  @@map("tournament")
}

model Group {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  winnerCount Int @default(1)

  tournament Tournament @relation(fields: [tournamentId],references: [id])
  tournamentId String @map("tournament_id")

  teams Team[]
  match Match[] 

  @@map("group")
}

model TournamentApplication {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  team Team @relation(fields: [teamId],references: [id], onDelete: Cascade)
  teamId String  @map("team_id")

  tournament Tournament @relation(fields: [tournamentId],references: [id], onDelete: Cascade)
  tournamentId String @map("tournament_id")

  players User[]

  @@map("tournament_application")
}

enum MatchType {
  FUTSAL
  MINI
}

enum MatchStatus {
  NotStarted
  Preparation
  Pending
  Break
  Suspended
  Completed
}

model Match {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type MatchType 

  date DateTime?
  place String?
  mainReferee String? @map("main_referee")
  firstReferee String? @map("first_referee")
  secondReferee String? @map("second_referee")

  teams Team[] @relation(name: "participatingTeams") 

  status MatchStatus @default(NotStarted)
  time Int @default(0)
  half Int @default(1)

  group Group? @relation(fields: [groupId], references: [id],onDelete: Cascade) 
  groupId String? @map("group_id")
  round Int
  step Int?

  tournament Tournament @relation(fields: [tournamentId], references: [id]) 
  tournamentId String @map("tournament_id")

  matchApplications MatchApplication[]
  matchTimeline MatchTimeline[]

  winner Team? @relation(name: "winningTeam", fields: [winnerId], references: [id]) 
  winnerId String? @map("winner_id")

  @@map("match")
}

model MatchApplication {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  color String?
  players User[]

  team Team @relation(fields: [teamId],references: [id])
  teamId String @map("team_id")

  match Match @relation(fields: [matchId],references: [id], onDelete: Cascade)
  matchId String @map("match_id")

  @@map("match_application")
}

enum MatchEvent {
  GOAL
  YELLOW
  RED
}

model MatchTimeline {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  time Int
  type MatchEvent
  half Int @default(1)


  team Team @relation(fields: [teamId],references: [id])
  teamId String @map("team_id")

  match Match @relation(fields: [matchId],references: [id], onDelete: Cascade)
  matchId String @map("match_id")

  player User @relation(fields: [playerId],references: [id])
  playerId String @map("player_id")

  @@map("match_timeline")
}

model News {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  description String?

  @@map("news")
}





