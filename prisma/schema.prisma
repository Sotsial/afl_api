
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id String  @id @default(uuid())
  email String @unique
  name String 
  password String
  player Player?
  role Role @default(PLAYER)
}

enum Role {
  PLAYER
  ADMIN
  SYSTEM_ADMIN
}

model Player {
  id String  @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String  @unique
  team Team? @relation(fields: [teamId], references: [id])
  teamId String
  tournamentApplications TournamentApplication[]
  matchApplications MatchApplication[]
  matchTimeline MatchTimeline[]
  captainedTeam Team? @relation(name: "capitan") 
}

model Team {
  id  String  @id @default(uuid())
  name String 
  tournamentApplications TournamentApplication[]
  match Match[] @relation(name: "participatingTeams") 
  matchApplications MatchApplication[]
  matchTimeline MatchTimeline[]
  players Player[] 
  tournaments Tournament[]
  group Group[]
  wonMatches Match[] @relation(name: "winningTeam") 
  wonTournaments Tournament[] @relation(name: "tournamentWinner") 
  capitan Player? @relation(fields: [capitanId], references: [id], name: "capitan") 
  capitanId String? @unique 
}

model Tournament {
  id  String  @id @default(uuid())
  name String 
  matchType MatchType
  tournamentType TournamentType
  tournamentApplications TournamentApplication[]
  status TournamentStatus @default(NotStarted)
  teamIds Team[]
  groups Group[]
  match Match[] 
  winner Team? @relation(name: "tournamentWinner", fields: [winnerId], references: [id]) 
  winnerId String?
  startDate DateTime?
}

model Group {
  id  String  @id @default(uuid())
  tournament Tournament @relation(fields: [tournamentId],references: [id])
  tournamentId String
  teamIds Team[]
  match Match[] 
}

model TournamentApplication {
  id  String  @id @default(uuid())
  team Team @relation(fields: [teamId],references: [id])
  teamId String
  tournament Tournament @relation(fields: [tournamentId],references: [id])
  tournamentId String
  players Player[]
}

model Match {
  id  String  @id @default(uuid())
  type MatchType
  teams Team[] @relation(name: "participatingTeams") 
  status MatchStatus @default(NotStarted)
  group Group? @relation(fields: [groupId], references: [id],onDelete: Cascade) 
  groupId String?
  tournament Tournament @relation(fields: [tournamentId], references: [id]) 
  tournamentId String
  date DateTime?
  matchApplications MatchApplication[]
  matchTimeline MatchTimeline[]
  winner Team? @relation(name: "winningTeam", fields: [winnerId], references: [id]) 
  winnerId String?
  place String?
  round Int
  step Int?
  time Int @default(0)
  half Int @default(1)
  mainReferee String?
  firstReferee String?
  secondReferee String?
}

model MatchApplication {
  id  String  @id @default(uuid())
  team Team @relation(fields: [teamId],references: [id])
  teamId String
  match Match @relation(fields: [matchId],references: [id])
  matchId String
  players Player[]
  color String?
}
model MatchTimeline {
  id  String  @id @default(uuid())
  time Int
  type MatchEvent
  team Team @relation(fields: [teamId],references: [id])
  teamId String
  match Match @relation(fields: [matchId],references: [id])
  matchId String
  player Player @relation(fields: [playerId],references: [id])
  playerId String
  half Int @default(1)
}

model News {
  id  String  @id @default(uuid())
  title String
  description String?
}

enum TournamentType {
  CUP
  LEAGUE
}


enum MatchType {
  FUTSAL
  MINI
}

enum MatchEvent {
  GOAL
  YELLOW
  RED
}

enum TournamentStatus {
  NotStarted
  Pending
  Completed
}

enum MatchStatus {
  NotStarted
  Preparation
  Pending
  Break
  Suspended
  Completed
}
